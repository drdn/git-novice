I")<p>Using a software tool to handle the versions of your project files
lets you focus on the more interesting/innovative aspects of your project.</p>

<ul>
  <li>Version control‚Äôs advantages
    <ul>
      <li>It‚Äôs easy to set up</li>
      <li>Every copy of a Git repository is a full backup of a project and its history</li>
      <li>A few easy-to-remember commands are all you need for most day-to-day version control tasks</li>
      <li>The [GitHub][github] hosting service provides a web-based collaboration service</li>
    </ul>
  </li>
  <li>Two main concepts
    <ul>
      <li><em>commit</em>: a recorded set of changes in your project‚Äôs files</li>
      <li><em>repository</em>: the history of all your project‚Äôs commits</li>
    </ul>
  </li>
  <li>Why use GitHub?
    <ul>
      <li>No need for a server: easy to set up</li>
      <li>GitHub‚Äôs strong community: your colleagues are probably already there</li>
    </ul>
  </li>
</ul>

<h2 id="overall">Overall</h2>

<p>Version control might be the most important topic we teach, but Git is
definitely the most complicated tool.  However, GitHub presently dominates the
open software repository landscape, so the time and effort required to teach
fundamental Git is justified and worthwhile.</p>

<p>Because of this complexity, we don‚Äôt teach novice learners about many
interesting topics, such as branching, hashes, and commit objects.</p>

<p>Instead we try to convince them that version control is useful for researchers
working in teams or not, because it is</p>

<ul>
  <li>a better way to ‚Äúundo‚Äù changes,</li>
  <li>a better way to collaborate than mailing files back and forth, and</li>
  <li>a better way to share your code and other scientific work with the world.</li>
</ul>

<h2 id="teaching-notes">Teaching Notes</h2>

<ul>
  <li>
    <p>You can ‚Äúsplit‚Äù your shell so that recent commands remain in view using <a href="https://github.com/rgaiacs/swc-shell-split-window">this</a> script.</p>
  </li>
  <li>
    <p>Make sure the network is working <em>before</em> starting this lesson.</p>
  </li>
  <li>
    <p>Drawings are particularly useful in this lesson: if you have a whiteboard,
[use it][drawings]!</p>
  </li>
  <li>
    <p>Version control is usually not the first subject in a workshop,
so get learners to create a GitHub account after the session before.
Remind learners that the username and email they use for GitHub (and setup
during Git configuration) will be viewable to the public by default.
However, there are many reasons why a learner may not want their personal
information viewable, and GitHub has [resources for keeping an email address
private][github-privacy].</p>
  </li>
  <li>
    <p>If some learners are using Windows, there will inevitably be issues
merging files with different line endings.  (Even if everyone‚Äôs on
some flavor of Unix, different editors may or may not add a
newline to the last line of a file.) Take a moment to explain
these issues, since learners will almost certainly trip over them
again.  If learners are running into line ending problems, GitHub
has a [page][github-line-endings] that helps with troubleshooting.</p>
  </li>
  <li>
    <p>We don‚Äôt use a Git GUI in these notes because we haven‚Äôt found one that
installs easily and runs reliably on the three major operating systems, and
because we want learners to understand what commands are being run.  That
said, instructors should demo a GUI on their desktop at some point during
this lesson and point learners at [this page][github-gui].</p>
  </li>
  <li>
    <p>Instructors should show learners graphical diff/merge tools like
[DiffMerge][diffmerge].</p>
  </li>
  <li>
    <p>When appropriate, explain that we teach Git rather than CVS, Subversion, or
Mercurial primarily because of GitHub‚Äôs growing popularity: CVS and
Subversion are now seen as legacy systems, and Mercurial isn‚Äôt nearly as
widely used in the sciences right now.</p>
  </li>
  <li>
    <p>Further resources:</p>
    <ul>
      <li>[git-it][git-it] is a self-paced command-line Git demo,
with [git-it-electron][git-it-electron] its GitHub Desktop successor.</li>
      <li>[Code School][code-school] has a free interactive course, [Try Git][try-git].</li>
      <li>for instructors, [the Git parable][git-parable] is useful background reading</li>
    </ul>
  </li>
</ul>

<h2 id="automated-version-control"><a href="../01-basics/index.html">Automated Version Control</a></h2>

<ul>
  <li>
    <p>Ask, ‚ÄúWho uses ‚Äòundo‚Äô in their editor?‚Äù All say ‚ÄúMe‚Äù. ‚ÄòUndo‚Äô is the simplest
form of version control.</p>
  </li>
  <li>
    <p>Give learners a five-minute overview of what version control does for them
before diving into the watch-and-do practicals.  Most of them will have
tried to co-author papers by emailing files back and forth, or will have
biked into the office only to realize that the USB key with last night‚Äôs
work is still on the kitchen table.  Instructors can also make jokes about
directories with names like ‚Äúfinal version‚Äù, ‚Äúfinal version revised‚Äù,
‚Äúfinal version with reviewer three‚Äôs corrections‚Äù, ‚Äúreally final version‚Äù,
and, ‚Äúcome on this really has to be the last version‚Äù to motivate version
control as a better way to collaborate and as a better way to back work up.</p>
  </li>
</ul>

<h2 id="setting-up-git"><a href="../02-setup/index.html">Setting Up Git</a></h2>

<ul>
  <li>
    <p>We suggest instructors and students use <code class="highlighter-rouge">nano</code> as the text editor for this
lessons because</p>

    <ul>
      <li>it runs in all three major operating systems,</li>
      <li>it runs inside the shell (switching windows can be confusing to students), and</li>
      <li>it has shortcut help at the bottom of the window.</li>
    </ul>

    <p>Please point out to students during setup that they can and should use
another text editor if they‚Äôre already familiar with it.</p>
  </li>
  <li>
    <p>When setting up Git, be very clear what learners have to enter: it is
common for them to edit the instructor‚Äôs details (e.g. email).  Check at
the end using <code class="highlighter-rouge">git config --list</code>.</p>
  </li>
</ul>

<h2 id="creating-a-repository"><a href="../03-create/index.html">Creating a Repository</a></h2>

<ul>
  <li>
    <p>When you do <code class="highlighter-rouge">git status</code>, Mac users may see a <code class="highlighter-rouge">.DS_Store</code> file showing as
untracked. This a file that Mac OS creates in each directory.</p>
  </li>
  <li>
    <p>The challenge ‚ÄúPlaces to create repositories‚Äù tries to reinforce the idea
that the <code class="highlighter-rouge">.git</code> folder contains the whole Git repo and deleting this folder
undoes a <code class="highlighter-rouge">git init</code>. It also gives the learner the way to fix the common
mistake of putting unwanted folders (like <code class="highlighter-rouge">Desktop</code>) under version control.</p>

    <p>Instead of removing the <code class="highlighter-rouge">.git</code> folder directly, you can choose to move it
first to a safer directory and remove it from there:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mv</span> .git temp_git
<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span>  temp_git
</code></pre></div>    </div>

    <p>The challenge suggests that it is a bad idea to create a Git repo inside another repo.
For more discussion on this topic, please see [this issue][repos-in-repos].</p>
  </li>
</ul>

<h2 id="tracking-changes"><a href="../04-changes/index.html">Tracking Changes</a></h2>

<ul>
  <li>
    <p>It‚Äôs important that learners do a full commit cycle by themselves (make
changes, <code class="highlighter-rouge">git diff</code>, <code class="highlighter-rouge">git add</code>, and <code class="highlighter-rouge">git commit</code>). The ‚Äú<code class="highlighter-rouge">bio</code> repository‚Äù
challenge does that.</p>
  </li>
  <li>
    <p>This is a good moment to show a diff with a graphical diff tool. If you
skip it because you‚Äôre short on time, show it once in GitHub.</p>
  </li>
  <li>
    <p>One thing may cause confusion is recovering old versions.  If, instead of
doing <code class="highlighter-rouge">$ git checkout f22b25e mars.txt</code>, someone does <code class="highlighter-rouge">$ git checkout
f22b25e</code>, they wind up in the ‚Äúdetached HEAD‚Äù state and confusion abounds.
It‚Äôs then possible to keep on committing, but things like <code class="highlighter-rouge">git push origin
master</code> a bit later will not give easily comprehensible results.  It also
makes it look like commits can be lost.  To ‚Äúre-attach‚Äù HEAD, use
<code class="highlighter-rouge">git checkout master</code>.</p>
  </li>
  <li>
    <p>This is a good moment to show a log within a Git GUI. If you skip it
because you‚Äôre short on time, show it once in GitHub.</p>
  </li>
</ul>

<h2 id="ignoring-things"><a href="../06-ignore/index.html">Ignoring Things</a></h2>

<p>Just remember that you can use wildcards and regular expressions to ignore a
particular set of files in <code class="highlighter-rouge">.gitignore</code>.</p>

<h2 id="remotes-in-github"><a href="../07-github/index.html">Remotes in GitHub</a></h2>

<ul>
  <li>
    <p>Make it clear that Git and GitHub are not the same thing: Git is an open
source version control tool, GitHub is a company that hosts Git
repositories in the web and provides a web interface to interact with repos
they host.</p>
  </li>
  <li>
    <p>If your learners are advanced enough to be comfortable with SSH, tell them
they can use keys to authenticate on GitHub instead of passwords, but don‚Äôt
try to set this up during class: it takes too long, and is a distraction
from the core ideas of the lesson.</p>
  </li>
  <li>
    <p>It is very useful to draw a diagram showing the different repositories
involved.</p>
  </li>
  <li>
    <p>When pushing to a remote, the output from Git can vary slightly depending on
what leaners execute. The lesson displays the output from git if a learner
executes <code class="highlighter-rouge">git push origin master</code>. However, some learners might use syntax
suggested by GitHub for pushing to a remote with an existing repository,
which is <code class="highlighter-rouge">git push -u origin master</code>. Learners using syntax from GitHub,
<code class="highlighter-rouge">git push -u origin master</code>, will have slightly different output, including
the line <code class="highlighter-rouge">Branch master set up to track remote branch master from origin by rebasing.</code></p>
  </li>
</ul>

:ET